---
import { getCollection } from 'astro:content';
import BaseHead from '../../components/BaseHead.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../../consts';
import { useTranslations, getDateFormatter } from '../../i18n/utils';

const lang = 'en';
const t = useTranslations(lang);
const formatDate = getDateFormatter(lang);

// Filter posts in English
const allPosts = await getCollection('blog');
const posts = allPosts
	.filter(post => post.data.language === 'en')
	.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={t('blog.title')} description={t('meta.description')} lang={lang} />
	</head>
	<body class="bg-gray-50 dark:bg-gray-900 transition-colors duration-300">
		<Header lang={lang} />

		<!-- Hero Section -->
		<section class="py-12 px-4 sm:px-6 lg:px-8 bg-gradient-to-r from-blue-600 to-purple-600 dark:from-blue-700 dark:to-purple-800 text-white transition-colors duration-300">
			<div class="max-w-4xl mx-auto text-center">
				<h1 class="text-3xl md:text-4xl font-bold mb-3">
					{t('blog.title')}
				</h1>
				<p class="text-lg text-blue-100 dark:text-blue-200">
					{t('blog.subtitle')}
				</p>
			</div>
		</section>

		<!-- Posts Grid -->
		<main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
			<div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
				{posts.map((post) => (
					<article class="bg-white dark:bg-gray-800 rounded-xl shadow-lg overflow-hidden hover:shadow-xl dark:hover:shadow-2xl transition-all duration-300">
						<div class="p-6">
							<div class="flex items-center justify-between mb-4">
								<span class="px-3 py-1 bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 rounded-full text-sm font-medium">
									{post.data.title.includes('JavaScript') ? 'JavaScript' : 
									 post.data.title.includes('React') ? 'React' : 'Development'}
								</span>
								<span class="text-gray-500 dark:text-gray-400 text-sm">
									{formatDate(post.data.pubDate)}
								</span>
							</div>
							
							<h2 class="text-xl font-bold text-gray-900 dark:text-white mb-3 hover:text-blue-600 dark:hover:text-blue-400 transition-colors">
								<a href={`/en/blog/${post.id}/`}>
									{post.data.title}
								</a>
							</h2>
							
							{post.data.description && (
								<p class="text-gray-600 dark:text-gray-300 mb-4 leading-relaxed">
									{post.data.description}
								</p>
							)}
							
							<div class="flex items-center justify-between">
								<span class="text-gray-500 dark:text-gray-400 text-sm">
									{post.body ? Math.ceil(post.body.length / 1000) : 5} {t('blog.readingTime')}
								</span>
								<a 
									href={`/en/blog/${post.id}/`}
									class="text-blue-600 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300 font-medium text-sm flex items-center"
								>
									{t('blog.readMore')} â†’
								</a>
							</div>
						</div>
					</article>
				))}
			</div>

			{posts.length === 0 && (
				<div class="text-center py-16">
					<h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-4">
						{t('blog.noPosts')}
					</h2>
					<p class="text-gray-600 dark:text-gray-300">
						{t('blog.noPostsDesc')}
					</p>
				</div>
			)}
		</main>

		<Footer lang={lang} />

		<script>
			// Theme toggle functionality
			const themeToggle = document.getElementById('theme-toggle');
			const sunIcon = document.getElementById('sun-icon');
			const moonIcon = document.getElementById('moon-icon');
			
			// Check for saved theme or default to system preference
			const savedTheme = localStorage.getItem('theme');
			const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
			const isDark = savedTheme === 'dark' || (!savedTheme && prefersDark);
			
			// Set initial theme
			if (isDark) {
				document.documentElement.classList.add('dark');
				sunIcon?.classList.remove('hidden');
				moonIcon?.classList.add('hidden');
			} else {
				sunIcon?.classList.add('hidden');
				moonIcon?.classList.remove('hidden');
			}
			
			// Theme toggle handler
			themeToggle?.addEventListener('click', () => {
				const isDarkMode = document.documentElement.classList.contains('dark');
				
				if (isDarkMode) {
					document.documentElement.classList.remove('dark');
					localStorage.setItem('theme', 'light');
					sunIcon?.classList.add('hidden');
					moonIcon?.classList.remove('hidden');
				} else {
					document.documentElement.classList.add('dark');
					localStorage.setItem('theme', 'dark');
					sunIcon?.classList.remove('hidden');
					moonIcon?.classList.add('hidden');
				}
			});
		</script>
	</body>
</html>